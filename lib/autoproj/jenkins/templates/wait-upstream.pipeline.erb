def isUpstreamOK(jobName, buildId)
{
    def job = Jenkins.instance.getItem(jobName)
    if (!job)
    {
        error("cannot find upstream job ${jobName}")
    }

    def build = job.getBuild(buildId.toString())

    def result = build.getResult()
    if (result)
    {
        if (result == Result.SUCCESS || result == Result.UNSTABLE)
        {
            return 'OK'
        }
        else
        {
            return 'FAILED'
        }
    }
    else
    {
        return 'IN_PROGRESS'
    }
}

def getTriggerBuild(currentBuild)
{
    def triggerBuild = currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause)
    if (triggerBuild) {
        return [triggerBuild.getUpstreamProject(), triggerBuild.getUpstreamBuild()]
    }
}

def findBuildTriggeredBy(job, triggerJob, triggerBuild)
{
    def jobBuilds = job.getBuilds()
    for (build in jobBuilds)
    {
        def buildCause = build.getCause(hudson.model.Cause$UpstreamCause)
        if (buildCause)
        {
            def causeJob   = buildCause.getUpstreamProject()
            def causeBuild = buildCause.getUpstreamBuild()
            if (causeJob == triggerJob && causeBuild == triggerBuild)
            {
                return build.getNumber()
            }
        }
    }
}

def getUpstreamBuilds(upstreamJobNames, triggerJob, triggerBuild)
{
    def upstreamBuilds = []

    // Iterate list -- NOTE: we cannot use groovy style or even modern java style iteration
    for (jobName in upstreamJobNames)
    {
        if (jobName == triggerJob)
        {
            echo "upstream build: ${jobName}#${triggerBuild}"
            upstreamBuilds << [jobName, triggerBuild]
        }
        else
        {
            def job = Jenkins.instance.getItem(jobName)
            def matchingBuild = findBuildTriggeredBy(job, triggerJob, triggerBuild)
            if (!matchingBuild)
            {
                if (triggerJob) {
                    echo "no build from ${jobName} has been triggered by ${triggerJob}#${triggerBuild}, using last successful build"
                }
                else {
                    echo "manual build trigger, using last successful build for ${jobName}"
                }
                matchingBuild = job.getLastSuccessfulBuild().getNumber()
            }
            echo "upstream build: ${jobName}#${matchingBuild}"
            upstreamBuilds << [jobName, matchingBuild]
        }
    }
    return upstreamBuilds
}

def waitForUpstreamBuilds(upstreamBuilds)
{
    def waitContinue = true;
    while(waitContinue)
    {
        waitContinue = false;

        // Iterate list -- NOTE: we cannot use groovy style or even modern java style iteration
        for(entry in upstreamBuilds) {
            def upstreamJobName = entry[0]
            def upstreamBuildId = entry[1]
            def status = isUpstreamOK(upstreamJobName, upstreamBuildId)
            if (status == 'IN_PROGRESS')
            {
                echo "waiting for job ${upstreamJobName}#${upstreamBuildId} to finish"
                waitContinue = true
                sleep time: 1, units: 'SECONDS'
            }
            else if (status == 'FAILED')
            {
                echo "${upstreamJobName}#${upstreamBuildId} did not finish successfully, aborting this build"
                currentBuild.result = 'NOT_BUILT';
                return false;
            }
        }
    }
    return true

}

def makeUpstreamArtifactImporters(autoproj, fullWorkspaceDir, upstreamDir,
    upstreamJobNames, upstreamPrefixes, upstreamBuilds)
{
    def fullUpstreamDir = "${fullWorkspaceDir}/${upstreamDir}"
    dir(upstreamDir) { deleteDir() }

    def upstreamArtifactImporters = [:]
    for (jobIndex = 0; jobIndex < upstreamJobNames.size(); ++jobIndex) {
        def jobName        = upstreamJobNames[jobIndex]
        def fullPrefix     = upstreamPrefixes[jobIndex]
        def buildId        = upstreamBuilds[jobIndex][1]
        def relativePrefix = Paths.get(fullWorkspaceDir).relativize(Paths.get(fullPrefix)).toString()
        upstreamArtifactImporters[jobName] = {
            dir(upstreamDir) {
                step ([$class: 'CopyArtifact',
                    projectName: jobName,
                    filter: "${jobName}-prefix.zip",
                    selector: [$class: 'SpecificBuildSelector', buildNumber: buildId.toString()]])
                dir(jobName) {
                    unzip zipFile: "${fullUpstreamDir}/${jobName}-prefix.zip"
                    sh "${autoproj} jenkins relativize ./ '@WORKSPACE_ROOT@' '${fullWorkspaceDir}'"
                }
            }
            dir(relativePrefix) {
                sh "rsync '${fullUpstreamDir}/${jobName}/' './' --delete --recursive --safe-links --perms --checksum"
            }
        }
    }

    return upstreamArtifactImporters
}

def triggeredByUser = (currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null)
def triggerBuild    = getTriggerBuild(currentBuild)
if (!triggerBuild) {
    triggerBuild = [null, null]
}
def upstreamBuilds = getUpstreamBuilds(upstreamJobNames, triggerBuild[0], triggerBuild[1])

if (!waitForUpstreamBuilds(upstreamBuilds)) {
    return
}

