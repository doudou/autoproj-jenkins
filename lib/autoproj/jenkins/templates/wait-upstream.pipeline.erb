def upstream_jobs = [<%= upstream_jobs.each_key.map { |job_name| "'#{job_name}'" }.join(", ") %>]

def isUpstreamOK(String jobName)
{
    def job = Jenkins.instance.getItem(jobName)
    if (!job)
    {
        error("cannot find upstream job ${jobName}")
    }
    if (job.isInQueue() || job.isBuilding())
    {
        return 'IN_PROGRESS'
    }
    else if (!job.getLastBuild())
    {
        return 'IN_PROGRESS'
    }
    else
    {
        def result = job.getLastBuild().getResult()
        if (result == Result.SUCCESS || result == Result.UNSTABLE)
        {
            return 'OK'
        }
        else
        {
            return 'FAILED'
        }
    }
}

def wait_continue = true;
while(wait_continue)
{
    wait_continue = false;

    // Iterate list -- NOTE: we cannot use groovy style or even modern java style iteration
    for (int i = 0; i < upstream_jobs.size(); i++)
    {
        def status = isUpstreamOK(upstream_jobs[i])
        if (status == 'IN_PROGRESS')
        {
            echo "waiting for job ${upstream_jobs[i]} to finish"
            wait_continue = true
            sleep time: 1, units: 'SECONDS'
        }
        else if (status == 'FAILED')
        {
            echo "${upstream_jobs[i]} did not finish successfully, aborting this build"
            currentBuild.result = 'NOT_BUILT';
            return;
        }
    }
}

