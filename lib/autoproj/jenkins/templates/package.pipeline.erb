stage 'wait for upstream jobs to finish'
waitUntil {
    def upstream_jobs = [<%= upstream_jobs.map { |job_name| "'#{job_name}'" }.join(" ") %>]

    // Iterate list -- NOTE: we cannot use groovy style or even modern java style iteration
    def all_ready = true
    for (int i = 0; all_ready && (i < upstream_jobs.size()); i++) {
        def job = Jenkins.instance.getItem(upstream_jobs[i])
        if (!job) {
            error("cannot find upstream job ${upstream_jobs[i]}")
        }

        all_ready = all_ready && (!job.isInQueue() && !job.isBuilding())
    }
    return all_ready
}

node {
    <%= render_template('bootstrap.pipeline', vcs: buildconf_vcs) %>

    stage 'build-dependencies'
    dir('artifacts') {
        deleteDir()
    }
    dir('artifacts') {
    }

    <% upstream_jobs.each do |job_name| %>
    step ([$class: 'CopyArtifact',
        projectName: '<%= job_name %>',
        filter: 'artifacts/<%= job_name%>-prefix.zip'])
    <% end %>
    <% upstream_jobs.each do |job_name| %>
    unzip zipFile: 'artifacts/<%= job_name %>-prefix.zip'
    <% end %>

    dir('dev') {
        stage 'build-prepare'
        dir('<%= package_dir %>') {
            <%= vcs.type %> <%= Hash[url: vcs.url].merge(vcs.options).map { |k, v| "#{k}: '#{v}'" }.join(", ") %>
        }
        
        def autoproj = ".autoproj/bin/autoproj"
        sh "${autoproj} osdeps '<%= package_name %>'"

        stage 'build'
        sh "${autoproj} build --force --deps=f '<%= package_name %>'"
    }

    stage 'trigger dependencies'

    zip zipFile: 'artifacts/<%= job_name %>-prefix.zip', archive: true, glob: 'dev/install/<%= package_name %>/**/*'

    <% downstream_jobs.each do |job_name| %>
    build job: "<%= job_name %>", wait: false
    <% end %>
}
