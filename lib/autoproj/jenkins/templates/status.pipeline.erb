<%= render_template('library.pipeline') %>

node(label: 'autoproj-jenkins-bookkeeping') {
    def fullWorkspaceDir = pwd()
    def resultPath = "${fullWorkspaceDir}/result"
    def targetPath = "${fullWorkspaceDir}/all"

    def status = [:]

    stage('aggregate job status') {
        def jobNames = '[<%= job_names.map { |name| "\"#{name}\"" }.join(", ") %>]'
        jobNames = readJSON text: jobNames

        dir(resultPath) { deleteDir() }
        dir(resultPath) {}

        dir(targetPath) { deleteDir() }
        dir(targetPath) {}

        for (jobIndex = 0; jobIndex < jobNames.size(); jobIndex += 1) {
            milestone()

            def jobName       = jobNames[jobIndex]
            def jobStatusDir  = "${fullWorkspaceDir}/per-package/${jobName}"
            def jobStatusPath = "${jobStatusDir}/status.json"

            copyJobStatus(jobStatusDir, jobName)

            if (fileExists(jobStatusPath)) {
                def jobStatus = readJSON file: jobStatusPath
                def packageName = jobStatus['name']
                def packageBasename   = packageName.tokenize('/')[-1]
                def logfilePrefixLength = packageBasename.size() + 1

                def finalLogfileNames = [:]
                dir(jobStatusDir) {
                    def logFiles  = findFiles glob: "*.log"
                    for (logFileIndex = 0; logFileIndex < logFiles.size(); logFileIndex += 1) {
                        def logFilePath = logFiles[logFileIndex].path
                        def logFileName = logFiles[logFileIndex].name
                        def logFileBasename = logFileName
                        if (logFileName.startsWith(packageBasename + "-")) {
                            logFileBasename = logFileName.substring(logfilePrefixLength)
                        }

                        def contents = readFile logFilePath
                        writeFile file: "${targetPath}/${jobName}-${logFileBasename}", text: contents
                        finalLogfileNames[logFileBasename.toString()] = "${jobName}-${logFileBasename}".toString()
                    }
                }
                jobStatus['logfiles'] = finalLogfileNames
                status[jobName] = jobStatus
            }
            else {
                echo "no status for ${jobName}"
                status[jobName] = [
                    name: jobName,
                    status: 'NEVER_BUILT',
                    logfiles: []
                ]
                currentBuild.result = 'UNSTABLE'
            }
        }
    }

    stage('archive result') {
        json = JsonOutput.toJson(status)
        writeFile(file: "${targetPath}/status.json", text: json)
        dir(targetPath) {
            zip zipFile: "${resultPath}/status.zip", glob: '*'
        }
        dir(resultPath) {
            archiveArtifacts 'status.zip'
        }
    }

    <% if publisher %>
    stage('trigger publishing job') {
        build job: "<%= publisher %>", wait: false, parameters: [
            string(name: 'AUTOPROJ_JENKINS_STATUS_JOB', value: env.JOB_NAME),
            string(name: 'AUTOPROJ_JENKINS_STATUS_BUILD_ID', value: currentBuild.id),
            string(name: 'AUTOPROJ_JENKINS_PROJECT_NAME', value: "<%= project_name %>")]
    }
    <% else project_name # make the variable access check happy %>
    <% end %>
}
